---
# This playbook will perform the monthly Red Hat security patching
# The monthly patching uses the RHEL 6.10 Security Server as its repo
# source and only installs security patches for the current major/minor release.

# NOTE INCLUDES kernel updates

- name: Obtain a list of applicable security updates and install them.
  hosts: all
  become: true
  tasks:
  - name: Check if any security updates are required.
    shell: "yum --security check-update | grep -v subscription-manager | grep -v Loaded | grep -v ': manager' | grep -v 'Limiting package lists to security relevant ones' | grep -v 'needed' | sed '/^$/d'"
    changed_when: updates.stdout_lines | length > 0
    args:
      warn: false
    register: updates

  - name: Display the number of security updates to be applied
    debug:
      msg: "Found {{ updates.stdout_lines | length }} packages to be updated:\n\n{{ updates.stdout }}"

  - when: updates.stdout_lines | length > 0
    block:
      - name: Download identified packages to destination server
        yum:
          name: "*"
          state: latest
          security: yes
          bugfix: no
          download_only: yes
          download_dir: /tmp/security_updates_{{ansible_date_time.date}}
          # exclude: kernel* redhat-release*
          exclude: net-snmp*
          disable_gpg_check: yes

      - name: Install identified packages using yum
        yum:
          name: "*"
          state: latest
          security: yes
          bugfix: no
          # exclude: kernel* redhat-release*
          exclude: net-snmp*
          disable_gpg_check: yes

      - name: Install yum-utils packages
        package:
          name: yum-utils

      - name: Check if a reboot is required
        shell: needs-restarting
        failed_when: false
        register: reboot_required
        changed_when: false

  - when: updates.stdout_lines | length > 0 and reboot_required.stdout_lines | length != 0
    block:
      - name: Reboot the server if required
        shell: sleep3; reboot
        ignore_errors: true
        changed_when: false
        async: 1
        poll: 0

      - name: Wait for the server to come back online after the reboot
        wait_for_connection:
          timeout: 600
          delay: 20
        register: reboot_result

      - name: Reboot time
        debug:
          msg: "The system rebooted in {{ reboot_result.elapsed }} seconds."
