---

## example command
##  hostnames java11 repos java11 install startup configure --extra-vars "bisora_system_password=Printrak"
##
## Running the playbook without specifiying tags will run the following plays
## 1. Checkl for lock
## 2. Shutdown
## 3. Install Mbis
## 4. Configure Mbis
## 5. Startup.
## e.g.
## ansible-playbook -i hosts-split-xxx site_mbis_splitinstall.yml
## (hostnames, java11, repo and dbmigrations are optional)
##
## To include repos, hostsname and dbmigrations please include the following tags
## ansible-playbook -i hosts-split1.yaml site_mbis_splitinstall-tags.yml --tags "hostnames,java11,repo,install,startup,configure,dbmigrations"
##
##
## to specify the DB password include --extra-vars "bisora_system_password=Printrak" when running the playbook
## ansible-playbook -i hosts-split1.yaml site_mbis_splitinstall-tags.yml --tags "hostnames,java11,repo,install,startup,configure,dbmigrations" --extra-vars "bisora_system_password=Printrak" > upgradewoittags.log
## ansible-playbook -i hosts-split-prototype.yaml site_mbis_splitinstall-tags.yml --tags "java11,install,startup,configure,dbmigrations" --extra-vars "bisora_system_password=Printrak"




- name: Check for lock
  hosts: all
  tags: always
  remote_user: root

  tasks:

  - name: Pause when the environment is marked as locked using the host Environment_lock inventory variable,
    ansible.builtin.pause:
    when: Environment_lock != "no"


- name: Create host names
  hosts: mbis_jboss, mbis_wms, mbis_des, mbis_fes, mbis_SSO, mbis_tera, mbis_db, mbss
  tags:
  - never
  - hostnames
  remote_user: root


  pre_tasks:

  tasks:

  - name: Remove host names
    vars:
      hostfile: /etc/hosts
      hostnametoremove:
        - keycloak
        - keycloak.mbis-dev.idemia.com
        - bismatcher
        - bisdb
        - bisapp
        - bisapp.mbis-dev.idemia.com
        - ptkads
        - bisartemis
        - bisartemis.mbis-dev.idemia.com
        - mbss
        - mbis_db
    ansible.builtin.import_role:
      name: mbis/mbis-etchosts
      tasks_from: remove.yml



  - name: Create bisdb hostname
    vars:
      hostfile: /etc/hosts
      IPaddress: "{{ hostvars[ groups['mbis_db'][0] ]['ansible_default_ipv4']['address'] }}"
      hostnames:
      - bisdb
    ansible.builtin.import_role:
      name: mbis/mbis-etchosts
    #when: "'mbis_jboss' in group_names"

  - name: Create bisapp
    vars:
      hostfile: /etc/hosts
      IPaddress: "{{ hostvars[ groups['mbis_jboss'][0] ]['ansible_default_ipv4']['address'] }}"
      hostnames:
        - bisapp
        - ptkads
        - bisapp.mbis-dev.idemia.com
    ansible.builtin.import_role:
      name: mbis/mbis-etchosts
    #when:
    #  - "'mbis_tera' in group_names"
    #  - "'mbis_fes' in group_names"
    #  - "'mbis_des' in group_names"

  - name: Add wms
    vars:
      hostfile: /etc/hosts
      IPaddress: "{{ hostvars[ groups['mbis_wms'][0] ]['ansible_default_ipv4']['address'] }}"
      hostnames:
        - bisartemis
        - bisartemis.mbis-dev.idemia.com
    ansible.builtin.import_role:
      name: mbis/mbis-etchosts
    #when: "'mbis_jboss' in group_names"


  - name: Add keycloak
    vars:
      hostfile: /etc/hosts
      IPaddress: "{{ hostvars[ groups['mbis_SSO'][0] ]['ansible_default_ipv4']['address'] }}"
      hostnames:
        - keycloak
        - keycloak.mbis-dev.idemia.com
    ansible.builtin.import_role:
      name: mbis/mbis-etchosts
    #when: "'mbis_jboss' in group_names"



  - name: Create mbss host mame
    vars:
      hostfile: /etc/hosts
      IPaddress: "{{ hostvars[ groups['mbss'][0] ]['ansible_default_ipv4']['address'] }}"
      hostnames:
        - mbss
        - bismatcher
    ansible.builtin.import_role:
      name: mbis/mbis-etchosts
    #when: "'mbis_fes' in group_names"


- name: Install repo
  hosts: all
  tags:
  - never
  - repo
  remote_user: root

  pre_tasks:

  - name: Free up space in var (yum clean all)
    ansible.builtin.command: yum clean all

  tasks:

  - ansible.builtin.import_role:
      name: mbis/mbis-mbis-repository

- name: Install MBIS common - java1.8
  hosts: mbis_jboss, mbis_des, mbis_fes, mbis_SSO, mbis_tera
  tags:
  - never
  - java18
  remote_user: root

  vars_prompt:

  vars:

  tasks:

  - name: Remove amazon Corretto 11 jdk
    ansible.builtin.yum:
      name: java-11-amazon-corretto-devel
      state: absent
      disablerepo: "*"
      enablerepo: "{{ mbis_common_repository_name }}"
    register: _results
    become: true
    become_user: root

  - name: Remove java 1.8.0
    ansible.builtin.yum:
      name: "*java-1.8.0-openjdk*"
      state: present
      disablerepo: "*"
      enablerepo: "{{ RedHat8_AppStream_repo_name }}"
    become: true
    become_user: root


  # - name: Update Java Alteratives Correct java version selected
  #   ansible.builtin.command: alternatives --set java /usr/lib/jvm/java-11-amazon-corretto/bin/java
  #   when: _results
  #   become: true
  #   become_user: root


  - name: "Create a directory if it does not exist"
    ansible.builtin.file:
      path: /usr/java
      state: directory
      mode: '0755'
    when: "java_devel|default(true)"
    become: true
    become_user: root

  - name: "Create a symbolic link jdk"
    ansible.builtin.file:
      #src: /usr/lib/jvm/java-11-amazon-corretto/
      src: /usr/lib/jvm/java-1.8.0/
      dest: "{{ item }}"
      owner: root
      group: root
      state: link
    with_items:
      - /usr/java/jdk
      - /usr/java/jdk64
      - /usr/java/jre
      - /usr/java/jre64
    when: "java_devel|default(true)"
    become: true
    become_user: root


- name: Install MBIS common - java11
  hosts: mbis_jboss, mbis_des, mbis_fes, mbis_SSO, mbis_tera
  tags:
  - never
  - java11
  remote_user: root
  # become: true
  # become_user: bis
  # become_method: sudo   # Become method being used when manually running scripts
  # become_flags: '-l'  # adding -l to load the user profile which includes environment variables.

  tasks:

  - name: Remove java 1.8.0
    ansible.builtin.yum:
      name: "*java-1.8.0-openjdk*"
      state: absent
      disablerepo: "*"
      enablerepo: "{{ mbis_common_repository_name }}"
    become: true
    become_user: root


  - name: Install amazon Corretto 11 jdk
    ansible.builtin.yum:
      name: java-11-amazon-corretto-devel
      state: present
      disablerepo: "*"
      enablerepo: "{{ mbis_common_repository_name }}"
    register: _results
    become: true
    become_user: root


  - name: Update Java Alteratives Correct java version selected
    ansible.builtin.command: alternatives --set java /usr/lib/jvm/java-11-amazon-corretto/bin/java
    when: _results
    become: true
    become_user: root


  - name: "Create a directory if it does not exist"
    ansible.builtin.file:
      path: /usr/java
      state: directory
      mode: '0755'
    when: "java_devel|default(true)"
    become: true
    become_user: root

  - name: "Create a symbolic link jdk"
    ansible.builtin.file:
      src: /usr/lib/jvm/java-11-amazon-corretto/
      dest: "{{ item }}"
      owner: root
      group: root
      state: link
    with_items:
      - /usr/java/jdk
      - /usr/java/jdk64
    when: "java_devel|default(true)"
    become: true
    become_user: root


  - name: Remove symbolic link for jre
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    with_items:
      - /usr/java/jre
      - /usr/java/jre64
    when: "java_devel|default(true)"
    become: true
    become_user: root









- name: Shutdown MBIS
  hosts: mbis_jboss, mbis_des, mbis_fes, mbis_SSO, mbis_tera
  tags:
  - install
  remote_user: root
  become: true
  become_user: bis
  become_method: sudo   # Become method being used when manually running scripts
  become_flags: '-i'  # adding -l to load the user profile which includes environment variables.

  pre_tasks:

  - name: Gather the package facts
    ansible.builtin.package_facts:
      manager: auto

  - name: Populate service facts
    ansible.builtin.service_facts:

  - name: Send shutdown mbis notificaiton
    ansible.builtin.command: echo "notify shutdown"
    notify: "shutdown mbis"

  tasks:

  - ansible.builtin.import_role:
      name: mbis/mbis-tera-install
      tasks_from: empty.yml
  - ansible.builtin.import_role:
      name: mbis/mbis-sso-install
      tasks_from: empty.yml
  - ansible.builtin.import_role:
      name: mbis/mbis-wms
      tasks_from: empty.yml
  - ansible.builtin.import_role:
      name: mbis/mbis-wfs
      tasks_from: empty.yml
  - ansible.builtin.import_role:
      name: mbis/mbis-app-install
      tasks_from: empty.yml
  - ansible.builtin.import_role:
      name: mbis/mbis-des-install
      tasks_from: empty.yml
  - ansible.builtin.import_role:
      name: mbis/mbis-fes-install
      tasks_from: empty.yml
  - ansible.builtin.import_role:
      name: mbis/mbis-tera-install
      tasks_from: empty.yml



- name: Install MBIS (using groups)
  # hosts: mbis_SSO, mbis_wms, mbis_jboss
  hosts: mbis_SSO, mbis_wms, mbis_jboss, mbis_tera, mbis_des, mbis_fes, mbis_db, mbss
  tags:
  - install
  remote_user: root
  force_handlers: True
  become: true
  become_user: bis
  become_method: su   # Become method being used when manually running scripts
  become_flags: '-l'  # adding -l to load the user profile which includes environment variables.

  vars_prompt:

  vars:
  # See ./group_vars

  pre_tasks:

  - name: Gather the package facts
    ansible.builtin.package_facts:
      manager: auto

  - name: Populate service facts
    ansible.builtin.service_facts:

  - name: Undeploy wars so they can be modified
    when: "'mbis_jboss' in group_names"
    block:
    - name: Check if DeployWars.sh file exists
      ansible.builtin.stat:
        path: "/opt/bis/scripts/DeployWars.sh"
      register: DeployWarsfile
      when: "'mbis_jboss' in group_names"

    - name: "unload wars to allow upgrade"
      ansible.builtin.shell: "/opt/bis/scripts/DeployWars.sh -u"
      become: true
      become_user: bis
      become_method: su   # Become method being used when manually running scripts
      become_flags: '-l'  # adding -l to load the user profile which includes environment variables.
      register: _result
      when:
        - DeployWarsfile.stat.exists
        - "'mbis_jboss' in group_names"

  tasks:

  # Post install tasks run in the other Roles are imported
  - ansible.builtin.import_role:
      name: mbis/mbis-oracle-install
    when: "'mbis_db' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-sso-install
    when: "'mbis_SSO' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-artemis-install
      tasks_from: uninstall.yml
    when: "'mbis_wms' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-wms
    when: "'mbis_wms' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-wfs
    when: "'mbis_wms' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-app-install
    when: "'mbis_jboss' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-des-install
    when: "'mbis_des' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-fes-install
    when: "'mbis_fes' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-tera-install
    when: "'mbis_tera' in group_names"

  # rpm -ivh http://xxx.xxx.xxx.xxx/custo/integration/release/backend/Custo/bis-customization-backend-mbis.rpm --replacefiles
  # rpm -ivh http://xxx.xxx.xxx.xxx/custo/integration/release/backend/Custo/bis-customization-dbm-oracle-mbis.rpm --replacefiles
  # rpm -ivh http://xxx.xxx.xxx.xxx/custo/integration/release/backend/Custo/bis-customization-des-mbis.rpm --replacefiles
  # rpm -ivh http://xxx.xxx.xxx.xxx/custo/integration/release/backend/Custo/bis-customization-des-mig-mbis.rpm --replacefiles

  - ansible.builtin.import_role:
      name: mbis/mbis-app_custo-install
    when: "'mbis_jboss' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-oracle_custo-install
    when: "'mbis_db' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-des_custo-install
    when: "'mbis_des' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-des_custo_mig-install
    when: "'mbis_des' in group_names"

  - name: Stop firewalld
    ansible.builtin.command: systemctl stop firewalld
    become: true
    become_user: root


  - name: Import licesnse
    ansible.builtin.import_role:
      name: mbis/mbis-license
      tasks_from: restore.yml
    when: "'mbis_jboss' in group_names"

  # - name: Notify roles which have been imported into hosts
  #   # This notificaiton is sent if a application has changed, but can be callled independently if needed.
  #   ansible.builtin.command: echo "notify postinstall"
  #   notify: "postinstall mbis"

  ####
  # Copy SSL certs from the package repo
  ####

  - name: Postinstall mbis notification
    ansible.builtin.command: echo "notify postinstall"
    notify: "postinstall mbis"

  - name: Flush handlers
    ansible.builtin.meta: flush_handlers

  - name: Debug
    ansible.builtin.debug:
      var: _results

  - name: Deploy wars to allow upgrade
    when: "'mbis_jboss' in group_names"
    block:
    - name: Check if DeployWars.sh file exists
      ansible.builtin.stat:
        path: "/opt/bis/scripts/DeployWars.sh"
      register: DeployWarsfile
      when: "'mbis_jboss' in group_names"

    - name: Deploy wars to allow upgrade
      ansible.builtin.shell: "/opt/bis/scripts/DeployWars.sh -d"
      become: true
      become_user: bis
      become_method: sudo  # Become method being used when manually running scripts
      become_flags: '-i'  # adding -l to load the user profile which includes environment variables.
      register: _result
      when:
        - "'mbis_jboss' in group_names"
        - DeployWarsfile.stat.exists



- name: Database migrations
  # hosts: mbis_SSO, mbis_wms, mbis_jboss
  hosts: mbis_db
  tags:
  - never
  - dbmigrations
  remote_user: root
  become: true
  become_user: bis
  become_method: sudo   # Become method being used when manually running scripts
  become_flags: '-i'  # adding -l to load the user profile which includes environment variables.

  vars_prompt:

  - name: Bisora_system_password
    prompt: Enter the Authentication password for bisora, used during database migration task
    private: yes
    default: "Printrak"

  vars:
  # See ./group_vars

  pre_tasks:

  - name: Gather the package facts
    ansible.builtin.package_facts:
      manager: auto

  - name: Populate service facts
    ansible.builtin.service_facts:


  tasks:

  - name: Run /home/bisora/scripts/schema/update-schemas.sh
    ansible.builtin.command: "sh /home/bisora/scripts/schema/update-schemas.sh -U SYSTEM -P {{ bisora_system_password }}"
    become: true
    become_user: bisora
    become_method: sudo
    become_flags: '-i'
    register: _results
    args:
      chdir: /home/bisora/scripts/schema
    when: "'mbis_db' in group_names"
    failed_when: "'ORA-65162' in _results.stdout_lines"

  - ansible.builtin.debug:
      var: _results.stdout

  - name: Run /home/bisora/scripts/schema/update-schemas-additional.sh
    ansible.builtin.command: "sh /home/bisora/scripts/schema/update-schemas-additional.sh  -U SYSTEM -P {{ bisora_system_password }}"
    become: true
    become_user: bisora
    become_method: sudo
    become_flags: '-i'
    register: _results
    args:
      chdir: /home/bisora/scripts/schema
    when: "'mbis_db' in group_names"
    failed_when: "'ORA-65162' in _results.stdout_lines"

  - ansible.builtin.debug:
      var: _results.stdout

  - name: Run /home/bisora/scripts/schema/ttt/ttt_upgrade_destroy_data.sh
    ansible.builtin.command: "sh /home/bisora/scripts/schema/ttt/ttt_upgrade_destroy_data.sh -U SYSTEM -P {{ bisora_system_password }}"
    become: true
    become_user: bisora
    become_method: sudo
    become_flags: '-i'
    register: _results
    args:
      chdir: /home/bisora/scripts/schema/ttt
    when: "'mbis_db' in group_names"
    failed_when: "'ORA-65162' in _results.stdout_lines"

  - ansible.builtin.debug:
      var: _results.stdout



- name: Configure MBIS
  hosts: mbis_SSO, mbis_wms, mbis_jboss, mbis_tera, mbis_des, mbis_fes, mbis_db
  tags:
  - configure
  remote_user: root
  become: true
  become_user: bis
  become_method: sudo   # Become method being used when manually running scripts
  become_flags: '-i'  # adding -l to load the user profile which includes environment variables.

  pre_tasks:

  - name: Pause when the environment is marked as locked using the host Environment_lock inventory variable,
    ansible.builtin.pause:
    when: Environment_lock != "no"

  - name: Gather the package facts
    ansible.builtin.package_facts:
      manager: auto

  - name: Populate service facts
    ansible.builtin.service_facts:

  tasks:
  - ansible.builtin.import_role:
      name: mbis/mbis-app-install
      tasks_from: empty.yml
    when: "'mbis_jboss' in group_names"

  - name: Prestartup mbis notification
    ansible.builtin.command: echo "notify prestartup"
    notify: "prestartup mbis"

  - name: Flush handlers
    ansible.builtin.meta: flush_handlers


- name: Startup MBIS
  hosts: mbis_SSO, mbis_wms, mbis_jboss, mbis_tera, mbis_des, mbis_fes, mbis_db
  tags:
  - startup
  remote_user: root
  become: true
  become_user: bis
  become_method: sudo   # Become method being used when manually running scripts
  become_flags: '-i'  # adding -l to load the user profile which includes environment variables.

  pre_tasks:

  - name: Pause when the environment is marked as locked using the host Environment_lock inventory variable,
    ansible.builtin.pause:
    when: Environment_lock != "no"

  - name: Gather the package facts
    ansible.builtin.package_facts:
      manager: auto

  - name: Populate service facts
    ansible.builtin.service_facts:

  tasks:
  - ansible.builtin.import_role:
      name: mbis/mbis-sso-install
      tasks_from: empty.yml
    when: "'mbis_SSO' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-wms
      tasks_from: empty.yml
    when: "'mbis_wms' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-app-install
      tasks_from: empty.yml
    when: "'mbis_jboss' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-wfs
      tasks_from: empty.yml
    when: "'mbis_jboss' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-des-install
      tasks_from: empty.yml
    when: "'mbis_des' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-fes-install
      tasks_from: empty.yml
    when: "'mbis_fes' in group_names"
  - ansible.builtin.import_role:
      name: mbis/mbis-tera-install
      tasks_from: empty.yml
    when: "'mbis_tera' in group_names"

  - name: Send startup mbis notificaiton
    ansible.builtin.command: echo "notify startup"
    notify: "startup mbis"

  - name: Flush handlers
    ansible.builtin.meta: flush_handlers