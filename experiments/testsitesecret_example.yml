---

# test playbook to create a VM
# Run with password vault.
# ansible-playbook -i /home/mphadmin/ansible-scripts-CBR/hosts-kevin /home/mphadmin/ansible-scripts-CBR/testvm.yml --vault-password-file ../MBISvaultpassword.txt

- name: Install Ansible AWX
  hosts: mbis
  remote_user: root

  tasks:

  - name: Gather all registered virtual machines
    community.vmware.vmware_vm_info:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      vm_type: vm
    delegate_to: localhost
    register: vminfo

  # Get VM name
  - name: Setting host facts using complex arguments
    set_fact:
      targetVM : "{{ vminfo.virtual_machines | to_json | from_json | community.general.json_query(server_name_query) | join(',') }}"
    vars:
      server_name_query: "[?ip_address=='xxx.xxx.xxx.xxx'].{ip_address: ip_address, guest_name: guest_name}"

  - name: Display all cluster names
    ansible.builtin.debug:
      var: targetVM.guest_name




  # - name: Display all cluster names
  #   ansible.builtin.debug:
  #     var: item
  #   loop: "{{ vminfo.virtual_machines | community.general.json_query('[*].vm_network.*.ipv4[*]') }}"

  # - name: Create a snapshot
  #   community.vmware.vmware_guest_snapshot:
  #     hostname: "{{ vcenter_hostname }}"
  #     username: "{{ vcenter_username }}"
  #     password: "{{ vcenter_password }}"
  #     datacenter: "{{ datacenter_name }}"
  #     folder: "{{ datacenter_folder }}"
  #     name: "{{ guest_name }}"
  #     state: present
  #     snapshot_name: test2
  #     description: snap1_description
  #   delegate_to: localhost


  vars:
  - vcenter_hostname: "sbims-vsp-uns01.testbench.nafis"
  - vcenter_username: "testbench\\nicwal.adm"
  - datacenter_name: "PSI NextGen"
  - datacenter_folder: "/{{ datacenter_name }}/vm"
  - guest_name: "ansible AIO test deploy #2"
  - vcenter_password: !vault |
          $ANSIBLE_VAULT;1.2;AES256;MBIS
          65303436636435653362363930633164363833623832333633336264626535666338333832616331
          3431376465383938336465363162643131656535323963330a376532373331383761303661653262
          65393933633139643630623836343339313563613964333636343436613731346532303162396662
          3936373163303432380a346137326433343061386332306538383537626130363766396530646662
          3466
  # Should this be managed under hosts groups using group vars?
  # For ease of development they are currently configured here
  # - ansible_python_interpreter: /usr/bin/python3

